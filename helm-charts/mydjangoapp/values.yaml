# Default values for mydjangoapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1
# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: registry.digitalocean.com/my-registry123/mydjangoapp
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "9fdd06e4aa27ba8a4378d3999cc43cd62efeeea1"
# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:
  - name: my-registry123
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""
# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8000
# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-issuer-dns-do
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: mydjangoapp.mirafzal.uz
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - hosts:
        - mydjangoapp.mirafzal.uz
      secretName: mydjangoapp-cert-secret
resources:
  limits:
    cpu: 100m
    memory: 200Mi
  requests:
    cpu: 10m
    memory: 100Mi
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health/
    port: http
    httpHeaders:
      - name: Host
        value: 127.0.0.1
readinessProbe:
  httpGet:
    path: /health/
    port: http
    httpHeaders:
      - name: Host
        value: 127.0.0.1
# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}
tolerations: []
affinity: {}
envFrom:
  - secretRef:
      name: myapp-creds-secret
celery:
  enabled: true
  replicaCount: 1
  command: [
    "celery", "-A", "mydjangoapp", "worker",
    "--pool=prefork",
    "-c", "1",
    "-l", "INFO"
    "--prefetch-multiplier=1",
    "--max-tasks-per-child=100"
  ]
  # optional args override:
  # args: []
  env: [] # e.g. [{"name":"CELERYD_CONCURRENCY","value":"2"}]
  envFrom:
    - secretRef:
        name: myapp-creds-secret # can reuse your existing .Values.envFrom if you want
  resources:
    limits:
      cpu: 200m
      memory: 400Mi
    requests:
      cpu: 100m
      memory: 200Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podLabels: {}
  podAnnotations: {}
  securityContext: {}
  podSecurityContext: {}
  image:
    repository: "{{ .Values.image.repository }}" # reuse same image
    tag: "{{ .Values.image.tag | default .Chart.AppVersion }}"
    pullPolicy: "{{ .Values.image.pullPolicy }}"
  volumeMounts: []
  volumes: []
redis:
  architecture: standalone
  auth:
    enabled: false
  master:
    pdb:
      create: false
